---
- name: "fetching instance details"
  become: false
  hosts: localhost
  vars:
    region: "eu-central-1" # Change to your region
    asg_name: "{{asg_name}}" #Change to your autoscalling group name
  tasks:
    - name: "gathering instance details"
      ec2_instance_info:
        region: "{{ region }}"
        filters:
          "tag:aws:autoscaling:groupName": "{{ asg_name }}"
          instance-state-name: ["running"]
      register: instance_details
    - name: "creating dynamic inventory"
      add_host:
        groups: "asg_instances"
        hostname: "{{ item.public_ip_address }}"
        ansible_ssh_user: "ubuntu" # Change to your username
        ansible_ssh_host: "{{ item.public_ip_address }}"
        ansible_ssh_port: "22"
        ansible_ssh_private_key_file: "aws-ws.pem" # Change to your key
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
      loop: "{{ instance_details.instances }}"

- name: "Deploying Docker"
  hosts: all
  become: true
  serial: 1
  tasks:
    - name: Install aptitude
      apt:
        name: aptitude
        state: latest
        update_cache: true

    - name: Install required system packages
      apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
          - virtualenv
          - python3-setuptools
        state: latest
        update_cache: true

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present


    - name: Update and upgrade apt packages
      become: true
      apt:
        upgrade: yes
        update_cache: yes
        cache_valid_time: 86400

    - name: Update apt and install docker-ce
      apt:
        name: docker-ce
        state: latest
        update_cache: true

    - name: Install Docker Module for Python
      pip:
        name: docker

    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: Pull Docker Image
      docker_image:
        name: "{{docker_image_tag}}"  # Replace with the Docker image you want to pull
        source: pull
    - name: Run Docker Container
      docker_container:
        name: devop-demo-node-app  # Replace with your desired container name
        image: "{{docker_image_tag}}"  # Specify the image you want to run
        state: started
        ports:
          - "80:80"  # Port mapping, adjust as needed
        restart_policy: always  # Adjust the restart policy as needed
